<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemalocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
       xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 本章中大多数示例使用XML来制定在Spring容器中生成每个BeanDefinition的配置元数据。上一节演示了如何通过源代码注解提供
    大量的配置元数据。然而，即使在这些示例中，注解也仅仅用于驱动依赖注入，"base"bean依然是明确在XML文件中定义。本节介绍通过
    扫描类路径隐式检测候选组件的选项。候选者组件是class类，这些类经过过滤匹配，由Spring容器注册的bean定义，成为Spring bean
    这消除了使用XML执行bean注册的需要；而是可以使用注解（例如@Component），AspectJ类型表达式或你自己的子定义过滤条件来选择
    将在容器中注册bean定义-->
    <!-- 从Spring 3.0开始，Spring JavaConfig项目提供的许多功能都是Spring Framework核心的一部分。这允许你使用Java而不是使用
    传统的XML文件来定义bean。可以看@Configuration,@Bean,@Import,@DependsOn注解，以了解如何使用这些新特性的例子。-->

    <!-- @Component和各构造型注解-->
    <!-- @Repository注解是满足存储库（也称为数据访问对象或DAO）的角色。此注解的使用会自动装换异常，如第16.2.2
    节"Exception translation"所述-->
    <!-- Spring提供了更多的构造型注解：@Component,@Service和@Controller。@Component可用于管理任何Spring的组件。@Repository
    ,@Service,@Controller是@Component用于指定用例的特殊形式，用于具体的用例，例如，服务和表现层。因此，你可以使用@Component
    注解你的组件类，但是通过使用@Repository，@Service或@Controller来注解它们，能够让你的类更易于被合适的工具处理或与切面关
    联。例如，这些注解可以使目标组件成为切入点。在Spring框架的未来版本中，@Repository，@Service和@Controller也可能带有附加
    的语义。因此，如果你在使用@Component或@Service来选择服务层，@Service显然是更好的选择。同理，在持久层要选择@Repository，
    它能自动转换异常。-->

    <!-- 3.10.2 Meta-annotations 元注解-->
    <!-- Spring提供的许多注解可以在你自己的代码中用作元注解，元注解即一种可用于别的注解之上的简单的注解。例如，上面提到的
    @Service注解@Component的元注解：
    @Target({ElementType.Type})
    @Retention(RetentionPolicy.RUNTIME)
    @Documented
    @Component
    public @interface Service {

    }-->
    <!-- 元注解也可以组合创建组合注解。例如，来自Spring MVC的@RestController注解是@Controller和@ResponseBody组成的。此外，
    组合注解也可以重新定义来自元注解的属性。这在只想暴露元注解的部分属性值的时候非常有用。例如，Spring的@SessionScope注解
    将它的作用域硬编码为session，但仍允许自定义proxyMode。
    @Target({ElementType.TYPE, ElementType.METHOD)
    @Retention(RetentionPolicy.RUNTIME)
    @Documented
    @Scope(WebApplicationContext.SCOPE_SESSION)
    public @interface SessionScope {
        @AliasFor(annotation = Scope.class)
        ScopedProxyMode prooxyMode() default ScopedProxyMode.TARGET_CLASS;
    }
    @SessionScope然后就可以使用了，而且不需要提供proxyMode，如下：
    @Service
    @SessionScope
    public class SessionScopedService {
        //..
    }
    或者重写proxyMode的值，如下所示：
    @Service
    @SessionScope(proxyMode = ScopedProxyMode.INTERFACES)
    public class SessionScopedUserService implements UserService {
        //..
    }
    有关详细信息，请参阅35.Spring Annotation Programming Model
    -->

    <!-- 3.10.3 自动检测类并注册bean定义-->
    <!-- Spring可以自动检测各代码层的被注解的类，并使用ApplicationContext内注册相应的BeanDefinition。例如，以下两个类就可以
    被自动探测：-->
    <!-- 要自动检测这些类并注册相应的bean，需要在@Configuration配置中添加@ComponentScan，其中basePackages属性是两个类的常用
    父包。（或者，你可以指定包含每个类的父包 逗号、分号、空格分隔列表）-->
    <!-- 为了简洁，上面可能使用注解的value属性，即@ComponentScan("com.pansy")，也可以使用XML形式的配置-->
    <context:component-scan base-package="com.pansy"/>
    <!-- 使用<context:component-scan>隐式地启用<context:annotation-config>的功能。当使用<context:component-scan>时，通常
    不需要包含<context:annotation-config>-->
    <!-- 此外，当使用component-scan元素时，"AutowiredAnnotationBeanPostProcessor"和"CommonAnnotationBeanPostProcessor"都
    会隐式包含，意味着这两个组件也是自动探测和注入的，所有这些都不需要XML配置。通过设置annotation-config属性值为false，即禁
    用AutowiredAnnotationBeanPostProcessor和CommonAnnotationBeanPostProcessor-->

    <!-- 3.10.4 使用过滤器自定义扫描-->
    <!-- 默认情况下，使用@Component,@Service,@Repository,@Controller注解的类或注解为@Component的自定义注解的类才能被检测为
    候选组件。但是，你可以通过自定义过滤器来修改和扩展行为。将它们添加为@ComponentScan注解的*includeFilters或excludeFilers
    参数（或作为component-scan元素的include-filter或exclude-filter *子元素）。每个过滤器元素需要type和expression属性。
    表3.5 过滤器类型，见3.10.4-->
    <!-- 以下示例显示了忽略所有@Repository注解，并使用带有"stub"的Repository代替。（AppConfig）-->
    <!-- 或者使用XML形式配置-->
    <context:component-scan base-package="com.pansy">
    <context:include-filter type="regex" expression=".*Stub.*Repository"/>
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>
    <!-- 你还可以通过在注解上设置useDefaultFilters = false或通过use-fault-filters = false作为<component-scan/>元素的属性
    来禁用默认的过滤器。这将不会自动检测带有@Component,@Repository,@Service,@Controller,或者@Configuration注解的类。-->

    <!-- 3.10.5 在组件中定义bean数据-->
    <!-- Spring组件也可以向容器提供bean定义元数据，在@Configuration注解的类中使用@Bean注解定义bean元数据(也就是Spring bean)
    这里有一个简单的例子。（FactoryMethodComponent）-->
    <!-- @Bean注解了工厂方法，还设置了其它的bean定义的属性，例如通过@Qualifier注解的qualifier值。可以指定的其它方法级别注解
    是@Scope,@Lazy以及自定义qualifier注解。除了用于组件初始化的角色之外，@Lazy注解也可以在@Autowired或者@Inject处使用。这种
    情况下，该注入将会变成延迟注入代理lazy-resolution proxy（也就是懒加载）-->
    <!-- 自动注入的字段和方法也可以像前面讨论的一样被支持，也可以支持@Bean方法的自动注入：（FactoryMethodComponent）-->
    <!-- 样例中，自动注入的方法参数，类型String，名称为Country，将会设置为另一个实例privateInstance的Age属性。Spring
    Expression Language元素通过符号#{<expression>}定义属性的值。对于@Value注解，表达式解析器在解析表达式后，会查找bean的名
    字并设置value-->
    <!-- 从Spring Framework 4.3开始，你还可以声明一个类型为InjectionPoint(或其更具体的子类"DependencyDescriptor")的工厂方
    法参数，以访问触发创建当前bean的请求注入点。请注意，这仅适用于实际创建bean实例，而不适用于注入现有实例。因此，这个特性对
    prototype scope的bean最有意义。对于其它scope，工厂方法将只能看到触发在给定scope中创建新bean实例的注入点：例如，触发创建
    一个延迟单例bean的依赖。在这种情况下，使用提供的注入点元数据具有语义关怀(为程序员考虑提供便利)。(FactoryMethodComponent)
    -->
    <!-- 在Spring Component中处理@Bean和在@Configuration中处理是不一样的。区别在于，在@Component中，不会使用CGLIB增强去拦
    截方法和属性的调用。在@Configuration注解的类中，@Bean注解的方法创建的Bean对象的方法和属性的调用，是使用CGLIB代理。方法
    的调用不是常规的java语法，而是通过容器来提供通常的生命周期管理和代理Spring bean，甚至在通过编程地方式调用@Bean方法时也
    也会形成对其它bean的引用。相比之下，在一个简单的"@Component"类中调用@Bean方法中的方法或字段具有标准Java语义，没有应用
    特殊的CGLIB处理或其它约束。-->
    <!-- 你可以将@Bean方法声明为static，允许在不将其包含的配置类作为实例的情况下调用它们。这在定义后置处理器bean时是特别有
    意义的。比如BeanFactoryPostProcessor或BeanPostProcessor，因为这类bean会在容器的生命周期前期被初始化，而不会触发其它部
    分的配置。对静态@Bean方法的调用永远不会被容器拦截，即使在@Configuration类内部。这是由于技术限制CGLIB的子类代理只会重写
    非静态方法。因此，对另一个@Bean方法的直接调用只有标准的Java语法，只会从工厂方法本身直接返回一个独立的实例。-->
    <!-- 由于Java语言的可见性，@Bean方法并不一定对容器中的Bean有效。你可能很随意的在非@Configuration类中定义或定义为静态方
    法。然而，在@Configuration类中的正常的@Bean方法都需要被重写的，因此，它们不应该定义为private或final。@Bean方法也可以在
    父类中被发现，同样适用于Java 8中接口的默认方法。这使得组件复杂的配置时能具有更好的灵活性，甚至能通过Java 8的默认方法实现
    多重继承，这在Spring 4.2开始支持。
    最后，请注意，单个类可以为同一个bean保存多个@Bean方法，如根据运用时可用的依赖关系选择合适的工厂方法。使用的算法时选择"最
    贪婪"的构造方法，一些场景可能会按如下方法选择对应的工厂方法：满足最多依赖的会被选择，这与使用@Autowired时选择多个构造方
    法时类似。-->

    <!-- 3.10.6 命名自动注册组件-->
    <!-- 扫描处理过程其中一部就是自动探测组件，扫描器使用BeanNameGenerator对探测到的组件命名。默认情况下，各代码层注解(
    @Component,@Service,@Depository,@Controller)所包含的name值，将会作为相应的bean定义的名字。
    如果这些注解没有name值，或者是其他一些被探测到的组件（比如使用自定义过滤器探测到的），默认的bean name生成器生成，以小写
    类名作为bean名字。例如，如果检测到以下两个组件，则名称将是myMovieLister,movieFinderImpl。（SimpleMovieLister,MovieFin
    -derImpl）-->
    <!-- 如果你不想依赖默认的bean命名策略，你可以提供一个自定义bean命名策略。首先，实现BeanNameGenerator接口，并确保包括一
    个默认的无参构造函数。然后，在配置扫描程序时提供完全限定类名：（AppConfig）-->
    <context:component-scan base-package="com.pansy"
    name-generator="com.pansy.MyNameGenerator"/>
    <!-- 生成规则应当如下，考虑和注解一起生成name，便于其他组件明确的引用。另一方面，当容器负责组装时，自动生成的名称就足
    够了。-->

    <!-- 3.10.7 为component-scan组件提供作用域-->
    <!-- 与Spring管理的组件一样，默认的最常用的作用域是单例Singleton。然而，有时你需要其他的作用域，可以通过@Scope注解来
    指定。只需在注解中提供作用域的名称。（MovieFinderImpl）-->
    <!-- 有关特定于Web作用域的详细信息。请参见第3.5.4节-->
    <!-- 想要自己提供自定义作用域解析的策略，而不是依赖于基于注解的方法，得实现ScopeMetadataResolver接口，并确保包含一个
    默认的无参构造函数。然后，在配置扫描程序时提供完全限定类名：（AppConfig）-->
    <context:component-scan base-package="com.pansy"
                            scope-resolver="com.pansy.MyScopeResolver"/>
    <!-- 但使用某个非单例作用域时，为作用域对象生成代理也许非常必要。原因看第3.5.4节。component-scan元素中有一个scope-proxy
    属性，即可实现此目的。它的值有三个选项：no,interfaces,and targetClass,比如下面的配置会生成标准的JDK动态代理。(AppConfig)-->
    <context:component-scan base-package="com.pansy"
                            scoped-proxy="interfaces"/>
    <!-- @Qualifier注解在第3.9.4节中讨论过了，该部分中的示例演示了在解析自动注入候选者时使用@Qualifier注解和自定义限定符
    注解以提供细粒度控制。因为这些示例基于XML bean定义，所以使用XML中的bean元素的qualifier或meta子元素在候选bean定义上提
    供了限定符元数据。当依靠classpath扫描并自动检测组件时，你可以在候选类上提供具有类型界别注解的限定符元数据。
    （MovieFinderImpl）-->
    <!-- 和大多数基于注解的替代方法一样，请注意，注解元数据绑定到类定义本身，而使用xml的时候，允许同一类型的beans在qualifier
    元数据中提供变量，因为元数据是依据实例而不是类来提供的-->
</beans>